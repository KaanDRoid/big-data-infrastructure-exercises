import json
import os
from typing import Optional

import psycopg2
from fastapi import APIRouter, status
from pydantic import BaseModel

from bdi_api.settings import DBCredentials, Settings

settings = Settings()
db_credentials = DBCredentials()
BASE_URL = "https://samples.adsbexchange.com/readsb-hist/2023/11/01/"

s8 = APIRouter(
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "Not found"},
        status.HTTP_422_UNPROCESSABLE_ENTITY: {"description": "Something is wrong with the request"},
    },
    prefix="/api/s8",
    tags=["s8"],
)


class AircraftReturn(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    registration: Optional[str]
    type: Optional[str]
    owner: Optional[str]
    manufacturer: Optional[str]
    model: Optional[str]


# PostgreSQL bağlantısı
DB_HOST = os.getenv("PG_HOST", "localhost")
DB_PORT = int(os.getenv("PG_PORT", 5432))
DB_NAME = os.getenv("PG_DB", "aircraft")
DB_USER = os.getenv("PG_USER", "postgres")
DB_PASS = os.getenv("PG_PASS", "postgres")

FUEL_CONSUMPTION_PATH = "/tmp/aircraft_type_fuel_consumption_rates/aircraft_type_fuel_consumption_rates.json"

@s8.get("/aircraft/", response_model=list[AircraftReturn])
def list_aircraft(num_results: int = 100, page: int = 0) -> list[AircraftReturn]:
    """
    List all the available aircraft, its registration and type ordered by icao asc FROM THE DATABASE
    Only return the aircraft that we have seen and not the entire list in the aircrafts database
    """
    conn = psycopg2.connect(host=DB_HOST, port=DB_PORT, dbname=DB_NAME, user=DB_USER, password=DB_PASS)
    cur = conn.cursor()
    # Get the aircrafts from the database
    cur.execute("""
        SELECT DISTINCT a.icao, a.registration, a.type, ac.ownop, ac.manufacturer, ac.model
        FROM aircraft a
        LEFT JOIN aircraft_db ac ON a.icao = ac.icao
        WHERE a.icao IN (SELECT DISTINCT icao FROM positions)
        ORDER BY a.icao ASC
        LIMIT %s OFFSET %s
    """, (num_results, page * num_results))
    result = [
        AircraftReturn(
            icao=row[0],
            registration=row[1],
            type=row[2],
            owner=row[3],
            manufacturer=row[4],
            model=row[5],
        )
        for row in cur.fetchall()
    ]
    cur.close()
    conn.close()
    return result


class AircraftCO2(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    hours_flown: float
    """Co2 tons generated"""
    co2: Optional[float]


@s8.get("/aircraft/{icao}/co2", response_model=AircraftCO2)
def get_aircraft_co2(icao: str, day: str) -> AircraftCO2:
    """
    Returns the CO2 generated by the aircraft **in a given day**.
    Compute the hours flown by the aircraft (assume each row we have is 5s).
    Use the gallon per hour from aircraft_type_fuel_consumption_rates.json
    If you don't have the fuel consumption rate, return `None` in the `co2` field
    """
    # 1. Saat hesabı
    conn = psycopg2.connect(host=DB_HOST, port=DB_PORT, dbname=DB_NAME, user=DB_USER, password=DB_PASS)
    cur = conn.cursor()
    cur.execute("""
        SELECT COUNT(*) FROM positions WHERE icao = %s AND to_char(to_timestamp(timestamp), 'YYYYMMDD') = %s
    """, (icao, day))
    row_count = cur.fetchone()[0]
    hours_flown = (row_count * 5) / 3600 if row_count else 0.0
    # 2. Uçağın type'ını bul
    cur.execute("SELECT type FROM aircraft WHERE icao = %s", (icao,))
    row = cur.fetchone()
    icaotype = row[0] if row else None
    cur.close()
    conn.close()
    # 3. Fuel consumption rate
    co2 = None
    if icaotype and os.path.exists(FUEL_CONSUMPTION_PATH):
        with open(FUEL_CONSUMPTION_PATH, encoding="utf-8") as f:
            fuel_data = json.load(f)
        fuel_info = fuel_data.get(icaotype)
        if fuel_info and "galph" in fuel_info:
            galph = fuel_info["galph"]
            fuel_used_gal = galph * hours_flown
            fuel_used_kg = fuel_used_gal * 3.04
            co2 = (fuel_used_kg * 3.15) / 907.185
    return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=co2)
